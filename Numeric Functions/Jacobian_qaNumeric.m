function Jacobian_qa = Jacobian_qaNumeric(L_b,L_e,L_u,P_x,P_y,P_z,thetaA1,thetaA2,thetaA3)
%JACOBIAN_QANUMERIC
%    JACOBIAN_QA = JACOBIAN_QANUMERIC(L_B,L_E,L_U,P_X,P_Y,P_Z,THETAA1,THETAA2,THETAA3)

%    This function was generated by the Symbolic Math Toolbox version 8.2.
%    24-Feb-2019 11:52:19

t2 = sin(thetaA1);
t3 = cos(thetaA1);
t4 = sqrt(3.0);
t5 = L_b./4.0;
t6 = L_e./4.0;
t7 = sin(thetaA2);
t8 = cos(thetaA2);
t9 = L_e./2.0;
t10 = sin(thetaA3);
t11 = cos(thetaA3);
Jacobian_qa = reshape([-L_u.*t3.*(P_x+t5-t6-(L_u.*t2)./2.0)-L_u.*t2.*(P_z+L_u.*t3).*2.0-L_u.*t3.*t4.*(P_y-(t4.*(L_b.*(-1.0./2.0)+t9+L_u.*t2))./2.0),0.0,0.0,0.0,-L_u.*t8.*(P_x+t5-t6-(L_u.*t7)./2.0)-L_u.*t7.*(P_z+L_u.*t8).*2.0+L_u.*t4.*t8.*(P_y+(t4.*(L_b.*(-1.0./2.0)+t9+L_u.*t7))./2.0),0.0,0.0,0.0,L_u.*t11.*(L_b.*(-1.0./2.0)+P_x+t9+L_u.*t10).*2.0-L_u.*t10.*(P_z+L_u.*t11).*2.0],[3,3]);
